[33mcommit 4eec99980f642076791272bcce81dbc7ef7518b0[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m
Author: Karan Fartyal <Karanfartyalpirated@gmail.com>
Date:   Sat Jul 26 12:29:57 2025 +0530

     created Group Chat functionality

[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..a884d38[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32mnode_modules/[m
[32m+[m[32m.env[m
[32m+[m[32mdist/[m
[1mdiff --git a/backend/config/db.js b/backend/config/db.js[m
[1mnew file mode 100644[m
[1mindex 0000000..24d49c6[m
[1m--- /dev/null[m
[1m+++ b/backend/config/db.js[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mconst mongoose = require("mongoose");[m
[32m+[m[32mconst dotenv = require("dotenv");[m
[32m+[m[32mconst colors = require("colors");[m
[32m+[m
[32m+[m[32mdotenv.config();[m
[32m+[m
[32m+[m[32mconst connectDB = async () => {[m
[32m+[m[32m  try {[m
[32m+[m[32m    const conn = await mongoose.connect(process.env.MONGO_URI, {[m
[32m+[m[32m      // useNewUrlParser: true,[m
[32m+[m[32m      //   useUnifiedTopology: true,[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    console.log(`Mongo Db connected ${conn.connection.host}`.green.underline);[m
[32m+[m[32m  } catch (err) {[m
[32m+[m[32m    console.log("Error", err.message);[m
[32m+[m[32m    process.exit();[m
[32m+[m[32m  }[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mmodule.exports = { connectDB };[m
[1mdiff --git a/backend/config/generateToken.js b/backend/config/generateToken.js[m
[1mnew file mode 100644[m
[1mindex 0000000..e3853f7[m
[1m--- /dev/null[m
[1m+++ b/backend/config/generateToken.js[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32mconst jwt = require("jsonwebtoken");[m
[32m+[m[32mconst dotenv = require("dotenv");[m
[32m+[m
[32m+[m[32mdotenv.config();[m
[32m+[m
[32m+[m[32mconst generateToken = (id) => {//create token with that user's id[m
[32m+[m[32m  //created[m
[32m+[m[32m  return jwt.sign({ id }, process.env.JWT_SECRET, {[m
[32m+[m[32m    expiresIn: "30d",[m
[32m+[m[32m  });[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mmodule.exports = generateToken; //send to userController ( yeah I mean )[m
[1mdiff --git a/backend/controllers/chatControllers.js b/backend/controllers/chatControllers.js[m
[1mnew file mode 100644[m
[1mindex 0000000..14684e3[m
[1m--- /dev/null[m
[1m+++ b/backend/controllers/chatControllers.js[m
[36m@@ -0,0 +1,193 @@[m
[32m+[m[32mconst asyncHandler = require("express-async-handler");[m
[32m+[m[32mconst Chat = require("../models/chatModel");[m
[32m+[m[32mconst User = require("../models/userModel");[m
[32m+[m[32mconst { FaRegCircleQuestion } = require("react-icons/fa6");[m
[32m+[m
[32m+[m[32m/* asyncHandler is a middleware that wraps async functions and forwards any error to Express' error handler.[m
[32m+[m
[32m+[m[32mreq.user contains the logged-in user (probably set by an authMiddleware after verifying JWT).[m
[32m+[m
[32m+[m[32mreq.body.userId is the user you want to chat with.*/[m
[32m+[m
[32m+[m[32mconst accessChat = asyncHandler(async (req, res) => {[m
[32m+[m[32m  const { userId } = req.body;[m
[32m+[m[32m  if (!userId) {[m
[32m+[m[32m    console.log("please provide the User id");[m
[32m+[m[32m    return res.status(400);[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  var isChat = await Chat.find({[m
[32m+[m[32m    //we find if therer are chats with logged in user and given user[m
[32m+[m[32m    isGroupChat: false,[m
[32m+[m[32m    $and: [[m
[32m+[m[32m      { users: { $elemMatch: { $eq: req.user._id } } },[m
[32m+[m[32m      { users: { $elemMatch: { $eq: userId } } },[m
[32m+[m[32m    ],[m
[32m+[m[32m  })[m
[32m+[m[32m    .populate("users", "-password") //then we populate users inside isChat[m
[32m+[m[32m    .populate("latestMessage"); //here chatModel referened the messageModel[m
[32m+[m
[32m+[m[32m  isChat = await User.populate(isChat, {[m
[32m+[m[32m    //then we populate to the latestmessage.sender inside isChat with name, pic and email[m
[32m+[m[32m    //we do all this so our frontend can access these fields[m
[32m+[m[32m    path: "latestMessage.sender",[m
[32m+[m[32m    select: "name pic email",[m
[32m+[m[32m  });[m
[32m+[m
[32m+[m[32m  if (isChat.length > 0) {[m
[32m+[m[32m    //if we find chats then we send chats[m
[32m+[m[32m    res.send(isChat[0]);[m
[32m+[m[32m  } else {[m
[32m+[m[32m    var chatData = {[m
[32m+[m[32m      //else we first config chat then make the chat below[m
[32m+[m[32m      chatName: "sender",[m
[32m+[m[32m      isGroupChat: false,[m
[32m+[m[32m      users: [req.user._id, userId],[m
[32m+[m[32m    };[m
[32m+[m
[32m+[m[32m    try {[m
[32m+[m[32m      const createdChat = await Chat.create(chatData); //first we create chat then we populate inside users[m
[32m+[m[32m      const fullChat = await Chat.findOne({ id: createdChat._id }).populate([m
[32m+[m[32m        //when we didn't have chats in the if block we created this by populating two times here we do this simply[m
[32m+[m[32m        "users",[m
[32m+[m[32m        "-password"[m
[32m+[m[32m      );[m
[32m+[m
[32m+[m[32m      res.status(200).json(fullChat);[m
[32m+[m[32m    } catch (error) {[m
[32m+[m[32m      res.status(400);[m
[32m+[m[32m      throw new Error(error.message);[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32mconst fetchChats = asyncHandler(async (req, res) => {[m
[32m+[m[32m  try {[m
[32m+[m[32m    Chat.find({ users: { $elemMatch: { $eq: req.user._id } } }) //in chat we find in the array where users have this id[m
[32m+[m[32m      .populate("users", "-password") //populate users[m
[32m+[m[32m      .populate("groupAdmin", "-password") //populate groupAdmin[m
[32m+[m[32m      .populate("latestMessage") //populate latest Messages[m
[32m+[m[32m      .sort({ updatedAt: -1 }) //sort while watching updated at field since we made timestamps to true[m
[32m+[m[32m      .then(async (results) => {[m
[32m+[m[32m        // console.log(results);//First console.log shows chats where latestMessage.sender is still just an ObjectId.[m
[32m+[m[32m        results = await User.populate(results, {[m
[32m+[m[32m          path: "latestMessage.sender",[m
[32m+[m[32m          select: "name pic email",[m
[32m+[m[32m        });[m
[32m+[m[32m        res.status(200).json(results); //gives an array of all chats that the logged in user has made with[m
[32m+[m[32m        // console.log(results); //same array of chats , but now each latest message.sender is now populated iwth name email pic.[m
[32m+[m[32m      });[m
[32m+[m[32m  } catch (error) {[m
[32m+[m[32m    res.status(400);[m
[32m+[m[32m    throw new Error(error.message);[m
[32m+[m[32m  }[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32mconst createGroupChat = asyncHandler(async (req, res) => {[m
[32m+[m[32m  if (!req.body.users || !req.body.name) {[m
[32m+[m[32m    res.status(400).send("please fill all the details");[m
[32m+[m[32m    return;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  var users = JSON.parse(req.body.users); //since we just can't send an array directly we have to stringify that first then we have to parse it on the backend[m
[32m+[m[32m  if (users.length < 2) {[m
[32m+[m[32m    res.status(400).send("please provide more than 2 users");[m
[32m+[m[32m    return;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  users.push(req.user);[m
[32m+[m[32m  try {[m
[32m+[m[32m    const groupChat = await Chat.create({[m
[32m+[m[32m      chatName: req.body.name,[m
[32m+[m[32m      isGroupChat: true,[m
[32m+[m[32m      users: users,[m
[32m+[m[32m      groupAdmin: req.user,[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    const fullGroupChat = await Chat.find({ _id: groupChat._id })[m
[32m+[m[32m      .populate("users",